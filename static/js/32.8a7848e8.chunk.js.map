{"version":3,"sources":["features/signUp/SignUp.tsx","features/signUp/SignUp.module.scss"],"names":["centerVH","styles","submitBtn","wrapper","TextField","lazy","Checkbox","SelectField","SignUp","signUp","useAuth","history","useHistory","validation","email","Yup","required","password","min","matches","passwordRepeat","oneOf","acceptedTerms","country","className","fallback","initialValues","validationSchema","onSubmit","values","actions","then","res","setSubmitting","push","catch","error","alert","code","message","props","name","type","label","value","prop","disabled","isSubmitting","module","exports"],"mappings":"+GAAA,2EAOQA,EAAiCC,IAAjCD,SAAUE,EAAuBD,IAAvBC,UAAWC,EAAYF,IAAZE,QAEvBC,EAAYC,gBAAK,kBAAM,iCACvBC,EAAWD,gBAAK,kBAAM,kCACtBE,EAAcF,gBAAK,kBAAM,kCA8EhBG,UAtEA,WACb,IAAQC,EAAWC,cAAXD,OACFE,EAAUC,cAEVC,EAAkB,CACtBC,MAAOC,MACJD,MAAM,yBACNE,SAAS,YACZC,SAAUF,MACPG,IAAI,EAAG,sDACPC,QAAQ,iBAAkB,iDAC1BH,SAAS,YACZI,eAAgBL,MACbM,MAAM,CAACN,IAAQ,YAAa,MAAO,wBACnCC,SAAS,YACZM,cAAeP,MACZC,SAAS,YACTK,MAAM,EAAC,GAAO,6CACjBE,QAASR,MACNM,MACC,CAAC,SAAU,YACX,kBAEDL,SAAS,aAId,OAAO,qBAAKQ,UAAWrB,EAAhB,SACL,eAAC,WAAD,CAAUsB,SAAU,6CAApB,UACE,8CAEA,cAAC,IAAD,CACEC,cAAe,CACbZ,MAAO,GACPG,SAAU,GACVG,eAAgB,IAElBO,iBAAkBZ,IAAWF,GAC7Be,SAAU,SAACC,EAAQC,GACjBrB,EAAOoB,EAAOf,MAAOe,EAAOZ,UACzBc,MAAK,SAACC,GACLF,EAAQG,eAAc,GACtBtB,EAAQuB,KAAK,QAEdC,OAAM,SAACC,GACNC,MAAM,GAAD,OAAID,EAAME,KAAV,YAAkBF,EAAMG,cAdrC,SAkBG,SAACC,GAAD,OACC,eAAC,IAAD,WACE,cAACpC,EAAD,CAAWqC,KAAK,QAAQC,KAAK,QAAQC,MAAM,UAC3C,cAACvC,EAAD,CAAWqC,KAAK,WAAWC,KAAK,WAAWC,MAAM,aACjD,cAACvC,EAAD,CAAWqC,KAAK,iBAAiBC,KAAK,WAAWC,MAAM,oBACvD,eAACpC,EAAD,CAAaoC,MAAM,UAAUF,KAAK,UAAlC,UACE,wBAAQG,MAAM,GAAd,8BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,0BAEF,cAACtC,EAAD,CAAUuC,KAAM,CAAEJ,KAAM,iBAAxB,+CAGA,wBAAQC,KAAK,SAASlB,UAAWtB,EAAW4C,SAAUN,EAAMO,aAA5D,SAA0E,sBAAMvB,UAAWxB,EAAjB,mC,oBChFtFgD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,UAAY,0BAA0B,SAAW","file":"static/js/32.8a7848e8.chunk.js","sourcesContent":["import { lazy, Suspense } from 'react';\r\nimport { Formik, Form, FormikProps } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useAuth } from '../../store/AuthContext';\r\n\r\nimport styles from './SignUp.module.scss'\r\nconst { centerVH, submitBtn, wrapper } = styles;\r\n\r\nconst TextField = lazy(() => import('../../commonComponents/formFields/TextField'));\r\nconst Checkbox = lazy(() => import('../../commonComponents/formFields/Checkbox'));\r\nconst SelectField = lazy(() => import('../../commonComponents/formFields/SelectField'));\r\n\r\ninterface Values {\r\n  password: string;\r\n  passwordRepeat: string;\r\n  email: string;\r\n}\r\n\r\nconst SignUp = () => {\r\n  const { signUp } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const validation: any = {\r\n    email: Yup.string()\r\n      .email('Invalid email address')\r\n      .required('Required'),\r\n    password: Yup.string()\r\n      .min(8, 'Password is too short - should be 8 chars minimum.')\r\n      .matches(/^[a-zA-Z0-9]*$/, 'Password can contain only letters and numbers')\r\n      .required('Required'),\r\n    passwordRepeat: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n      .required('Required'),\r\n    acceptedTerms: Yup.boolean()\r\n      .required('Required')\r\n      .oneOf([true], 'You must accept the terms and conditions.'),\r\n    country: Yup.string()\r\n      .oneOf(\r\n        ['poland', 'noPoland'],\r\n        'Select Country'\r\n      )\r\n      .required('Required'),\r\n  }\r\n\r\n\r\n  return <div className={wrapper}>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <h1>Registration</h1>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n          passwordRepeat: '',\r\n        }}\r\n        validationSchema={Yup.object(validation)}\r\n        onSubmit={(values, actions) => {\r\n          signUp(values.email, values.password)\r\n            .then((res) => {\r\n              actions.setSubmitting(false);\r\n              history.push('/');\r\n            })\r\n            .catch((error) => {\r\n              alert(`${error.code} ${error.message}`);\r\n            });\r\n        }}\r\n      >\r\n        {(props: FormikProps<Values>) => (\r\n          <Form>\r\n            <TextField name=\"email\" type=\"email\" label=\"Email\" />\r\n            <TextField name=\"password\" type=\"password\" label=\"Password\" />\r\n            <TextField name=\"passwordRepeat\" type=\"password\" label=\"Repeat Password\" />\r\n            <SelectField label=\"Country\" name=\"country\">\r\n              <option value=\"\">Select a country</option>\r\n              <option value=\"poland\">Poland</option>\r\n              <option value=\"noPoland\">No Poland</option>\r\n            </SelectField>\r\n            <Checkbox prop={{ name: \"acceptedTerms\" }}>\r\n              I accept the terms and conditions\r\n            </Checkbox>\r\n            <button type=\"submit\" className={submitBtn} disabled={props.isSubmitting}><span className={centerVH}>Submit</span></button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Suspense>\r\n  </div>\r\n}\r\n\r\nexport default SignUp;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SignUp_wrapper__2riPc\",\"submitBtn\":\"SignUp_submitBtn__25Vjl\",\"centerVH\":\"SignUp_centerVH__1hUPQ\"};"],"sourceRoot":""}