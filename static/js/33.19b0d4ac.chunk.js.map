{"version":3,"sources":["features/slider/Slider.module.scss","features/slider/Slider.tsx"],"names":["module","exports","slider","styles","arrow","leftArr","rightArr","pagesContainer","sliderPages","sliderPage","active","ProductCard","lazy","ShowError","SliderPage","Slider","useState","slidePage","setSlidePage","pagesArray","setPagesArray","dispatch","useAppDispatch","products","useAppSelector","selectProducts","fetchError","selectError","pagesContRef","useRef","currWidth","useWidth","turnPage","count","length","prevCount","createPages","useCallback","itemWidth","maxItemsCountPerPage","Math","floor","current","offsetWidth","pagesCount","ceil","index","pagesArr","i","itemsForPageArr","push","ebook","cardStyleVersion","id","useEffect","fetchRandomEbooks","productsCount","category","className","fallback","ref","map","item","onClick","random"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,eAAiB,+BAA+B,MAAQ,sBAAsB,QAAU,wBAAwB,SAAW,yBAAyB,YAAc,4BAA4B,WAAa,2BAA2B,OAAS,yB,4GCOzRC,EAAsFC,IAAtFD,OAAQE,EAA8ED,IAA9EC,MAAOC,EAAuEF,IAAvEE,QAASC,EAA8DH,IAA9DG,SAAUC,EAAoDJ,IAApDI,eAAgBC,EAAoCL,IAApCK,YAAaC,EAAuBN,IAAvBM,WAAYC,EAAWP,IAAXO,OAE7EC,EAAcC,gBAAK,kBAAM,iCACzBC,EAAYD,gBAAK,kBAAM,gCACvBE,EAAaF,gBAAK,kBAAM,kCAkFfG,UAhFU,WACvB,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAWC,cACXC,EAAWC,YAAeC,KAC1BC,EAAaF,YAAeG,KAC5BC,EAAeC,iBAAuB,MACpCC,EAAcC,cAAdD,UAGFE,EAAW,SAACC,GACZA,GAAS,IACXf,EAAae,EAAQ,KACE,IAAdhB,GAAmBgB,EAAQ,EACpCf,EAAaC,EAAWe,OAAS,GACxBjB,IAAcE,EAAWe,OAAS,IAAgB,IAAXD,EAChDf,EAAa,GAEbA,GAAa,SAAAiB,GAAS,OAAIA,EAAYF,MAKpCG,EAAcC,uBAAY,WAO9B,IANA,IAAMC,EAAoBR,EAAY,IAAM,IAAM,GAC9CS,EAAuBC,KAAKC,MAAMb,EAAac,QAASC,YAAcL,EAAY,GAClFM,EAAaJ,KAAKK,KAAKtB,EAASW,OAASK,GACzCO,EAAQ,EACRC,EAAgB,GAEXC,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CAGnC,IAFA,IAAMC,EAAkB,GAEfD,EAAI,EAAGA,EAAIT,GACdO,IAAUvB,EAASW,OADiBc,IAExCC,EAAgBC,KAAK,cAACvC,EAAD,CAAsCwC,MAAO5B,EAASuB,GAAQM,iBAAiB,QAAQd,UAAWA,GAAhFf,EAASuB,GAAOO,KACvDP,IAGFC,EAASG,KAAKD,GAEhB7B,EAAc2B,KACb,CAACxB,IAWJ,OATA+B,qBAAU,WACRjC,EAASkC,YAAkB,CAAEC,cAAe,GAAIC,SAAU,wBACzD,CAACpC,IAEJiC,qBAAU,WACH5B,GAAYU,MAChB,CAACA,IAIF,qBAAKsB,UAAWxD,EAAhB,SACE,eAAC,WAAD,CAAUyD,SAAU,6CAApB,UAEE,qBAAKD,UAAWnD,EAAgBqD,IAAKhC,EAArC,SACGF,EAAa,cAACb,EAAD,IAAgBM,EAAW0C,KAAI,SAACC,EAAMhB,GAAY,OAAO,cAAChC,EAAD,CAAwBG,UAAWA,EAAnC,SAA+C6C,GAA9BhB,QAI1F,oBAAIY,UAAWlD,EAAf,SACGW,EAAW0C,KAAI,SAACC,EAAMhB,GACrB,OAAO,oBAELY,UAAS,UAAKjD,EAAL,YAAmBQ,IAAc6B,EAAQpC,EAAS,MAC3DqD,QAAS,kBAAM/B,EAASc,EAAQ,OAF3BN,KAAKwB,eAOhB,sBAAMN,UAAS,UAAKtD,EAAL,YAAcC,EAAd,KAA0B0D,QAAS,kBAAM/B,GAAU,IAAlE,eACA,sBAAM0B,UAAS,UAAKtD,EAAL,YAAcE,GAAYyD,QAAS,kBAAM/B,EAAS,IAAjE","file":"static/js/33.19b0d4ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"Slider_slider__1bOsF\",\"pagesContainer\":\"Slider_pagesContainer__2M80L\",\"arrow\":\"Slider_arrow__38iI_\",\"leftArr\":\"Slider_leftArr__228g6\",\"rightArr\":\"Slider_rightArr__16RN5\",\"sliderPages\":\"Slider_sliderPages__2dWLp\",\"sliderPage\":\"Slider_sliderPage__38mZr\",\"active\":\"Slider_active__3Wxzh\"};","import { lazy, Suspense, useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../../helpers/types/hooks';\r\nimport useWidth from '../../helpers/useWidth';\r\n\r\nimport { selectProducts, selectError, fetchRandomEbooks } from './sliderSlice';\r\n\r\nimport styles from './Slider.module.scss';\r\n\r\nconst { slider, arrow, leftArr, rightArr, pagesContainer, sliderPages, sliderPage, active } = styles;\r\n\r\nconst ProductCard = lazy(() => import('../../commonComponents/productCard/ProductCard'));\r\nconst ShowError = lazy(() => import('../../commonComponents/showError/ShowError'));\r\nconst SliderPage = lazy(() => import('./SliderPage'));\r\n\r\nconst Slider: React.FC = () => {\r\n  const [slidePage, setSlidePage] = useState(0);\r\n  const [pagesArray, setPagesArray] = useState([]);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const products = useAppSelector(selectProducts);\r\n  const fetchError = useAppSelector(selectError);\r\n  const pagesContRef = useRef<HTMLDivElement>(null);\r\n  const { currWidth } = useWidth();\r\n\r\n  // function for changing slider pages\r\n  const turnPage = (count: number) => {\r\n    if (count >= 100) {\r\n      setSlidePage(count - 100);\r\n    } else if (slidePage === 0 && count < 0) {\r\n      setSlidePage(pagesArray.length - 1);\r\n    } else if (slidePage === pagesArray.length - 1 && count !== -1) {\r\n      setSlidePage(0);\r\n    } else {\r\n      setSlidePage(prevCount => prevCount + count);\r\n    }\r\n  }\r\n\r\n  //function calculate and fill number of pages and it elements\r\n  const createPages = useCallback(() => {\r\n    const itemWidth: number = currWidth > 950 ? 150 : 90;\r\n    let maxItemsCountPerPage = Math.floor(pagesContRef.current!.offsetWidth / itemWidth - 1);\r\n    let pagesCount = Math.ceil(products.length / maxItemsCountPerPage);\r\n    let index = 0;\r\n    let pagesArr: any = [];\r\n\r\n    for (let i = 0; i < pagesCount; i++) {\r\n      const itemsForPageArr = [];\r\n\r\n      for (let i = 0; i < maxItemsCountPerPage; i++) {\r\n        if (index === products.length) break;\r\n        itemsForPageArr.push(<ProductCard key={products[index].id} ebook={products[index]} cardStyleVersion='cover' itemWidth={itemWidth} />);\r\n        index++;\r\n      }\r\n\r\n      pagesArr.push(itemsForPageArr);\r\n    }\r\n    setPagesArray(pagesArr);\r\n  }, [products]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchRandomEbooks({ productsCount: 12, category: 'Wszystkie Ebooki' }));\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (!fetchError) createPages();\r\n  }, [createPages])\r\n\r\n\r\n  return (\r\n    <div className={slider}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        {/* slider pages */}\r\n        <div className={pagesContainer} ref={pagesContRef} >\r\n          {fetchError ? <ShowError /> : pagesArray.map((item, index) => { return <SliderPage key={index} slidePage={slidePage}>{item}</SliderPage> })}\r\n        </div>\r\n\r\n        {/* elements for selecting page  */}\r\n        <ul className={sliderPages}>\r\n          {pagesArray.map((item, index) => {\r\n            return <li\r\n              key={Math.random()}\r\n              className={`${sliderPage} ${slidePage === index ? active : null}`}\r\n              onClick={() => turnPage(index + 100)} />\r\n          })}\r\n        </ul>\r\n\r\n        {/* elements for turning page*/}\r\n        <span className={`${arrow} ${leftArr} `} onClick={() => turnPage(-1)}>&lt;</span>\r\n        <span className={`${arrow} ${rightArr}`} onClick={() => turnPage(1)}>&gt;</span>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;"],"sourceRoot":""}